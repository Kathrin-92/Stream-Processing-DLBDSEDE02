services:
  api_service:
    container_name: api_service_container
    build:
      context: ./api_service
      dockerfile: Dockerfile
    volumes:
      - ./api_service/sensor_data/batch_data:/usr/src/api_service/sensor_data/batch_data
      - ./api_service/sensor_data/metadata:/usr/src/api_service/sensor_data/metadata
      - ./api_service/sensor_data/stream_data:/usr/src/api_service/sensor_data/stream_data
      - api-service-logs:/usr/src/api_service
    networks:
      - app_network
    restart: on-failure
    depends_on:
      - postgres
    # adjust health endpoint as needed or trigger spark_stream container manually
    # use health check endpoint to ensure api_service is running (based on your crontab configurations) before starting the stream job
    # if you prefer manual control, wait until api_service is ready and start the stream job manually
    # The stream job can start before api_service is simulating data stream, however, this may waste resources
    # if the job runs without incoming data.
    healthcheck:
      test: ["CMD", "pgrep", "python"]
      interval: 5m
      timeout: 10s
      retries: 3
      start_period: 15m # adjust according to your crontab configurations

  postgres:
    container_name: postgres_db
    build:
      context: ./database_service
      dockerfile: Dockerfile
    shm_size: 128mb
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: airquality_sensor_data
    ports:
      - "5432:5432"
    volumes:
      - postgres_db:/var/lib/postgresql/data
      - postgres_db:/usr/src/database_service/db_setup.sql:/docker-entrypoint-initdb.d/db_setup.sql
    networks:
      - app_network
    restart: always

  spark-streaming:
    container_name: spark_stream
    build:
      context: ./spark_processing
      dockerfile: Dockerfile
    depends_on:
      api_service:
          condition: service_healthy
      postgres:
        condition: service_started
    ports:
      - "7077:7077"   # spark master port
      - "8080:8080"   # spark UI port
      - "4040:4040"   # job web UI port
    volumes:
      - ./api_service/sensor_data/stream_data:/api_service/sensor_data/stream_data
      - stream-process-logs:/usr/src/spark_processing
    networks:
        - app_network
    restart: always

volumes:
  postgres_db:
    driver: local
  stream-process-logs:
    driver: local
  api-service-logs:
    driver: local

networks:
  app_network:
    driver: bridge